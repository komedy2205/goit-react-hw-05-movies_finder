{"version":3,"file":"static/js/577.f706576a.chunk.js","mappings":"0TAEaA,EAAOC,EAAAA,GAAAA,KAAH,6PAUJC,EAAQD,EAAAA,GAAAA,MAAH,8IAQLE,EAAQF,EAAAA,GAAAA,MAAH,+GAOLG,EAASH,EAAAA,GAAAA,OAAH,kc,SCrBJ,SAASI,EAAT,GAAqC,IAAfC,EAAc,EAAdA,WACnC,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KA8BMC,EAAQ,kBAAMD,EAAQ,KAE5B,OACE,UAACT,EAAD,CAAMW,SAXa,SAACC,GACpBA,EAAIC,iBAEJP,EAAW,CAAEE,KAAAA,IAEbE,KAMA,WACE,SAACR,EAAD,WACE,SAACC,EAAD,CACEW,KAAK,OACLN,KAAK,OACLO,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,aAAa,MACbC,MAAOX,EACPY,SAzCiB,SAACC,GACxBA,EAAMR,iBAEN,MAAwBQ,EAAMC,cAAtBd,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MAEd,GACO,SADCX,EAEJC,EAAQU,QAIRI,QAAQC,IAAR,4BAAiChB,EAAjC,sBAGgB,KAAhBA,EAAKiB,QACPC,EAAAA,GAAAA,MAAY,uCA6BZ,SAACtB,EAAD,CAAQU,KAAK,SAAb,uB,kBClDOa,EAAgB1B,EAAAA,GAAAA,GAAH,8EAMb2B,GAAY3B,EAAAA,EAAAA,IAAO4B,EAAAA,GAAP5B,CAAH,iVCQtB,EAbuB,SAAC,GAAwB,IAAtB6B,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACtBC,EAA6BF,EAA7BE,GAAIC,EAAyBH,EAAzBG,eAAgBzB,EAASsB,EAATtB,KAG5B,OACE,SAACmB,EAAD,WACE,SAACC,EAAD,CAAWM,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAML,GAA/C,SACGE,GAAkBzB,KAFHwB,ICQxB,EAfmB,SAAC,GAAwB,IAAtBF,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAE1B,OACE,wBACGD,EAAKO,KAAI,gBAAGL,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAgBzB,EAAvB,EAAuBA,KAAvB,OACR,SAAC,EAAD,CAEEsB,KAAM,CAAEE,GAAAA,EAAIC,eAAAA,EAAgBzB,KAAAA,GAC5BuB,SAAUA,GAFLC,SCCFM,EAAa,WACxB,OAA0B/B,EAAAA,EAAAA,UAAS,IAAnC,eAAOgC,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMZ,GAAWa,EAAAA,EAAAA,MAEXC,EAAQH,EAAaI,IAAI,UAG/BC,EAAAA,EAAAA,YAAU,WAAM,wCACd,iGAEQF,EAFR,iCAGyBG,EAAAA,EAAAA,IAAiBH,GAH1C,OAGYI,EAHZ,OAKMT,EAASS,EAAKC,SACc,IAAxBD,EAAKC,QAAQC,QACfzB,EAAAA,GAAAA,MAAY,6BAPpB,uDAWIA,EAAAA,GAAAA,MAAY,6BAXhB,0DADc,uBAAC,WAAD,wBAed0B,KACC,CAACP,IAQJ,OACE,6BACE,SAACxC,EAAD,CAAYC,WARU,SAACwB,GACzB,IAAQtB,EAASsB,EAATtB,KAERmC,EAAgB,CAAEE,MAAOrC,OAMtB+B,IAAS,SAAC,EAAD,CAAYT,KAAMS,EAAOR,SAAUA","sources":["components/Form/Form.styled.jsx","components/Form/Form.js","components/SearchList/SearchListItem.styled.jsx","components/SearchList/SearchListItem.jsx","components/SearchList/SearchList.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Form = styled.form`\n  border-color: black;\n\n  padding: 10px;\n  display: flex;\n  //flex-direction: column;\n  align-items: flex-start;\n  box-shadow: rgb(0 0 0 / 12%) 0px 1px 3px, rgb(0 0 0 / 14%) 0px 1px 1px,\n    rgb(0 0 0 / 20%) 0px 2px 1px;\n`;\nexport const Label = styled.label`\n  /*  padding-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  font-size: 15px;\n  font-weight: 500; */\n`;\n\nexport const Input = styled.input`\n  margin-right: 10px;\n  padding-left: 10px;\n  font-size: 16px;\n  font-weight: 400;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  padding: 5px 20px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  font-size: 12px;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  font-weight: 400;\n  background-color: yellow;\n\n  :hover {\n    color: white;\n    background-color: royalblue;\n    transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n    transition: color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Form, Label, Input, Button } from \"./Form.styled\";\n\nexport default function SearchForm({ formSubmit }) {\n  const [name, setName] = useState(\"\");\n\n  const handleNameChange = (event) => {\n    event.preventDefault();\n\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      default:\n        console.log(`Field type name - ${name} is not processed`);\n    }\n\n    if (name.trim() === \"\") {\n      toast.error(\"Enter the name of the picture\");\n      return;\n    }\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    formSubmit({ name });\n\n    reset();\n  };\n\n  const reset = () => setName(\"\");\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleNameChange}\n        />\n      </Label>\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n}\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const ListItemStyle = styled.li`\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const LinkStyle = styled(Link)`\n  padding: 5px 20px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  font-size: 14px;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  font-weight: 400;\n\n  :hover {\n    background-color: royalblue;\n    color: white;\n    transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import PropTypes from \"prop-types\";\n\nimport { ListItemStyle, LinkStyle } from \"./SearchListItem.styled\";\n\nconst SearchListItem = ({ data, location }) => {\n  const { id, original_title, name } = data;\n\n  //console.log(data);\n  return (\n    <ListItemStyle key={id}>\n      <LinkStyle to={`/movies/${id}`} state={{ from: location }}>\n        {original_title || name}\n      </LinkStyle>\n    </ListItemStyle>\n  );\n};\n\nexport default SearchListItem;\n\nSearchListItem.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    original_title: PropTypes.string,\n    name: PropTypes.string,\n  }),\n};\n","import SearchListItem from \"./SearchListItem\";\n\nconst SearchList = ({ data, location }) => {\n  //console.log(data);\n  return (\n    <ul>\n      {data.map(({ id, original_title, name }) => (\n        <SearchListItem\n          key={id}\n          data={{ id, original_title, name }}\n          location={location}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default SearchList;\n","import { useState, useEffect } from \"react\";\nimport { useSearchParams, useLocation } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport SearchForm from \"../../components/Form/Form\";\nimport { searchFetchMovie } from \"../../services/themoviedbApi\";\nimport SearchList from \"../../components/SearchList/SearchList\";\n/////\nexport const MoviesPage = () => {\n  const [movie, setMovie] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  const query = searchParams.get(\"query\");\n  // console.log(movieName);\n\n  useEffect(() => {\n    async function searchFetch() {\n      try {\n        if (query) {\n          const item = await searchFetchMovie(query);\n          //console.log(\"Запит:\", item);\n          setMovie(item.results);\n          if (item.results.length === 0) {\n            toast.error(\"No video for your request\");\n          }\n        }\n      } catch (error) {\n        toast.error(\"No video for your request\");\n      }\n    }\n    searchFetch();\n  }, [query]);\n\n  const formSubmitHandler = (data) => {\n    const { name } = data;\n    //setMovieName(name);\n    setSearchParams({ query: name });\n  };\n\n  return (\n    <main>\n      <SearchForm formSubmit={formSubmitHandler}></SearchForm>\n      {movie && <SearchList data={movie} location={location} />}\n    </main>\n  );\n};\n"],"names":["Form","styled","Label","Input","Button","SearchForm","formSubmit","useState","name","setName","reset","onSubmit","evt","preventDefault","type","pattern","title","required","autoComplete","value","onChange","event","currentTarget","console","log","trim","toast","ListItemStyle","LinkStyle","Link","data","location","id","original_title","to","state","from","map","MoviesPage","movie","setMovie","useSearchParams","searchParams","setSearchParams","useLocation","query","get","useEffect","searchFetchMovie","item","results","length","searchFetch"],"sourceRoot":""}